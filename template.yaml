AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  "Student Engagement App Backend Resources"

Globals:
  Function:
    Runtime: python3.9
    Timeout: 180
    Environment:
      Variables:
        DEBUG_MODE: True
        BUCKET_NAME: !Ref DataStoreBucket

Parameters:
  documentsTable:
    Type: String
    Default: DocumentsTable
    Description: Name of the DynamoDB table that contains all the website documents (Ensure you do not have a table with this name already).
#  eventsTable:
#    Type: String
#    Default: EventsTable
#    Description: DynamoDB Table name for events (Ensure you do not have a table with this name already).
#  newsTable:
#    Type: String
#    Default: NewsTable
#    Description: DynamoDB Table name for news (Ensure you do not have a table with this name already).
#  athleticsNewsTable:
#    Type: String
#    Default: AthleticsNewsTable
#    Description: DynamoDB Table name for news (Ensure you do not have a table with this name already).
#  blogsTable:
#    Type: String
#    Default: BlogsTable
#    Description: DynamoDB Table name for blogs (Ensure you do not have a table with this name already).
#  clubsTable:
#    Type: String
#    Default: ClubsTable
#    Description: DynamoDB Table name for clubs (Ensure you do not have a table with this name already).
#  esHashTable:
#    Type: String
#    Default: ESHashTable
#    Description: DynamoDB Table name that stores the hashes for all documents currently in Elasticsearch
  newsExpiryDays:
    Type: String
    Default: 60
    Description: Number of days after which a news article is automatically deleted from DynamoDB
  blogExpiryDays:
    Type: String
    Default: 120
    Description: Number of days after which a blog post is automatically deleted from DynamoDB
  eventsExpiryDays:
    Type: String
    Default: 2
    Description: Number of days after an event's end time after which the event item is automatically deleted from DynamoDB
  kibanaUser:
    Type: String
    Default: kibana
    Description: The name of the user that is used to log into kibana.
  ESDomainName:
    Type: String
    Default: 'engagement-app-data-index'
    Description: Name for the Amazon ES domain that will be created. Domain names must start
      with a lowercase letter and must be between 3 and 28 characters.
      Valid characters are a-z (lowercase only), 0-9.
  ProjectName:
    Type: String
    Default: StudentEngagement
    Description: A description to identify project
  EnvironmentName:
    Type: String
    Default: dev
    Description: A description to identify environment (e.g. dev, prod)
Outputs:
  getESDocumentsLambdaFunction:
    Value: !Ref getESDocuments
    Description: The name of the lambda that queries elasticsearch with a given payload
  getESDocumentsLambdaFunctionArn:
    Value: !GetAtt getESDocuments.Arn
    Description: The arn of the lambda that queries elasticsearch with a given payload
  dataLakeBucketName:
    Value: !Ref DataStoreBucket
    Description: Name of the central Data Lake S3 bucket
  KibanaPassword:
    Description: The password for the kibana user
    Value: !GetAtt ESCognito.KibanaPassword
  KibanaUser:
    Description: The username for the kibana user
    Value: !GetAtt ESCognito.KibanaUser
  KibanaUrl:
    Description: A hyperlink to the Kibana tool
    Value: !Sub https://${ESDomain.DomainEndpoint}/_plugin/kibana/
  ESDomainOutputName:
    Description: The name of the deployed Elasticsearch domain
    Value: !Ref ESDomainName
    Export:
      Name: !Sub "${AWS::StackName}-ESDomainName"

Resources:

  DataStoreBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "engagement-app-datastore-bucket-${AWS::Region}-${AWS::AccountId}"

  DataGrabberLambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: DataGrabberPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                Resource:
                  - !GetAtt documentsDDBTable.Arn
#                  - !Sub ${eventsDDBTable.Arn}
#                  - !Sub ${newsDDBTable.Arn}
#                  - !Sub ${blogsDDBTable.Arn}
#                  - !Sub ${clubsDDBTable.Arn}
#                  - !Sub ${athleticsNewsDDBTable.Arn}
              - Effect: "Allow"
                Action:
                  - "ssm:GetParameter"
                  - "ssm:PutParameter"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: !Sub "${DataStoreBucket.Arn}/*"

#  esHasherLambdaIAMRole:
#    Type: "AWS::IAM::Role"
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              Service:
#                - "lambda.amazonaws.com"
#            Action:
#              - "sts:AssumeRole"
#      Path: "/"
#      Policies:
#        - PolicyName: EsHasherPolicy
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: "Allow"
#                Action:
#                  - 'logs:CreateLogGroup'
#                  - 'logs:CreateLogStream'
#                  - 'logs:PutLogEvents'
#                Resource:
#                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
#              - Effect: "Allow"
#                Action:
#                  - "dynamodb:Scan"
#                  - "dynamodb:GetItem"
#                  - "dynamodb:PutItem"
#                  - "dynamodb:UpdateItem"
#                Resource:
#                  - !Sub ${eventsDDBTable.Arn}
#                  - !Sub ${newsDDBTable.Arn}
#                  - !Sub ${blogsDDBTable.Arn}
#                  - !Sub ${clubsDDBTable.Arn}
#                  - !Sub ${athleticsNewsDDBTable.Arn}
#              - Effect: "Allow"
#                Action:
#                  - "dynamoDB:DeleteItem"
#                  - "dynamodb:Scan"
#                  - "dynamodb:PutItem"
#                Resource:
#                  - !Sub ${esHashDDBTable.Arn}
#              - Effect: Allow
#                Action:
#                  - 'es:ESHttpGet'
#                  - 'es:ESHttpPost'
#                  - 'es:ESHttpPut'
#                  - 'es:ESHttpHead'
#                  - 'es:ESHttpDelete'
#                Resource:
#                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomain}/*'
#                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomain}'

  esQueryLambdaIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: EsQueryPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
              - Effect: Allow
                Action:
                  - 'es:ESHttpGet'
                  - 'es:ESHttpPost'
                  - 'es:ESHttpPut'
                  - 'es:ESHttpHead'
                Resource:
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomain}/*'
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomain}'

#  TODO Refine role policies as needed
  StreamHandlerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: dynamodb-stream-responder-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:DescribeStream"
                  - "dynamodb:ListStreams"
                Resource:
                  - !GetAtt documentsDDBTable.StreamArn
              - Effect: "Allow"
                Action:
                  - es:*
                Resource: "*"

#  StatesExecutionRole:
#    Type: "AWS::IAM::Role"
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              Service:
#                - !Sub "states.${AWS::Region}.amazonaws.com"
#            Action: "sts:AssumeRole"
#      Policies:
#        - PolicyName: StatesExecutionPolicy
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Effect: Allow
#                Action:
#                  - "lambda:InvokeFunction"
#                Resource:
#                  - !GetAtt getEventsData.Arn
#                  - !GetAtt getNewsData.Arn
#                  - !GetAtt getAthleticsNewsData.Arn
#                  - !GetAtt getBlogData.Arn
#                  - !GetAtt getClubData.Arn
#                  - !GetAtt esHasher.Arn

#  DataGrabberStateMachine:
#    Type: "AWS::StepFunctions::StateMachine"
#    Properties:
#      RoleArn: !GetAtt StatesExecutionRole.Arn
#      DefinitionString:
#        !Sub |-
#        {
#          "StartAt": "Check if Events refresh",
#          "States": {
#            "Check if Events refresh": {
#              "Type": "Choice",
#              "Choices": [
#                {
#                  "Variable": "$.dataType",
#                  "StringEquals": "Events",
#                  "Next": "Get Events Data"
#                }
#              ],
#              "Default": "Check if News refresh"
#            },
#            "Get Events Data": {
#              "Type":  "Task",
#              "Resource": "${getEventsData.Arn}",
#              "InputPath": "$",
#              "ResultPath": "$.eventsResult",
#              "Next": "Update Elasticsearch"
#            },
#            "Check if News refresh": {
#              "Type": "Choice",
#              "Choices": [
#                {
#                  "Variable": "$.dataType",
#                  "StringEquals": "News",
#                  "Next": "Get News Data"
#                }
#              ],
#              "Default": "Check if Blogs refresh"
#            },
#            "Get News Data": {
#              "Type":  "Task",
#              "Resource": "${getNewsData.Arn}",
#              "InputPath": "$",
#              "ResultPath": "$.newsResult",
#              "Next": "Update Elasticsearch"
#            },
#            "Check if Blogs refresh": {
#              "Type": "Choice",
#              "Choices": [
#                {
#                  "Variable": "$.dataType",
#                  "StringEquals": "Blogs",
#                  "Next": "Get Blogs Data"
#                }
#              ],
#              "Default": "Check if Athletics News refresh"
#            },
#            "Get Blogs Data": {
#              "Type":  "Task",
#              "Resource": "${getBlogData.Arn}",
#              "InputPath": "$",
#              "ResultPath": "$.blogResults",
#              "Next": "Update Elasticsearch"
#            },
#            "Check if Athletics News refresh": {
#              "Type": "Choice",
#              "Choices": [
#                {
#                  "Variable": "$.dataType",
#                  "StringEquals": "AthleticsNews",
#                  "Next": "Get Athletics News Data"
#                }
#              ],
#              "Default": "Check if Clubs refresh"
#            },
#            "Get Athletics News Data": {
#              "Type":  "Task",
#              "Resource": "${getAthleticsNewsData.Arn}",
#              "InputPath": "$",
#              "ResultPath": "$.athleticsNewsResults",
#              "Next": "Update Elasticsearch"
#            },
#            "Check if Clubs refresh": {
#              "Type": "Choice",
#              "Choices": [
#                {
#                  "Variable": "$.dataType",
#                  "StringEquals": "Clubs",
#                  "Next": "Get Clubs Data"
#                }
#              ],
#              "Default": "Complete"
#            },
#            "Get Clubs Data": {
#              "Type":  "Task",
#              "Resource": "${getClubData.Arn}",
#              "InputPath": "$",
#              "ResultPath": "$.clubResults",
#              "Next": "Update Elasticsearch"
#            },
#            "Update Elasticsearch": {
#              "Type": "Task",
#              "Resource": "${esHasher.Arn}",
#              "InputPath": "$",
#              "ResultPath": "$.esHasherResult",
#              "Next": "Complete"
#            },
#            "Complete": {
#              "Type": "Succeed"
#            }
#          }
#        }

  CloudwatchEventRuleIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: InvokeLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource:
                  - !GetAtt getEventsData.Arn
                  - !GetAtt getBlogData.Arn
                  - !GetAtt getClubData.Arn
                  - !GetAtt getNewsData.Arn
                  - !GetAtt getAthleticsNewsData.Arn
                  
  EventsUpdateEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - ESDomain
    Properties:
      Description: Triggers the get_events_data lambda to retrieve and save Events data, every day
      Name: EventsEventRule
      RoleArn: !GetAtt CloudwatchEventRuleIAMRole.Arn
      ScheduleExpression: rate(1440 minutes)
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt getEventsData.Arn
          Id: EventsTarget
          Input: '{"dataType": "Events"}'

  PermissionForEventsToInvokeEventsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref getEventsData
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt EventsUpdateEvent.Arn

  NewsUpdateEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - ESDomain
    Properties:
      Description: Triggers the State machine to retrieve and save News data, every days
      Name: NewsEventRule
      RoleArn: !GetAtt CloudwatchEventRuleIAMRole.Arn
      ScheduleExpression: rate(1440 minutes)
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt getNewsData.Arn
          Id: NewsTarget
          Input: '{"dataType": "News"}'

  PermissionForNewsToInvokeNewsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref getNewsData
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt NewsUpdateEvent.Arn

  BlogsUpdateEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - ESDomain
    Properties:
      Description: Triggers the get_blogs_data lambda to retrieve and save Blogs data, every day
      Name: BlogsEventRule
      RoleArn: !GetAtt CloudwatchEventRuleIAMRole.Arn
      ScheduleExpression: rate(1440 minutes)
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt getBlogData.Arn
          Id: BlogsTarget
          Input: '{"dataType": "Blogs"}'

  PermissionForEventsToInvokeBlogsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref getBlogData
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt BlogsUpdateEvent.Arn

  AthleticsNewsUpdateEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - ESDomain
    Properties:
      Description: Triggers the State machine to retrieve and save Athletics News data, every days
      Name: AthleticsNewsEventRule
      RoleArn: !GetAtt CloudwatchEventRuleIAMRole.Arn
      ScheduleExpression: rate(1440 minutes)
      State: "ENABLED"
      Targets:
        - Arn: !GetAtt getAthleticsNewsData.Arn
          Id: AthleticsNewsTarget
          Input: '{"dataType": "AthleticsNews"}'

  PermissionForEventsToInvokeAthleticsNewsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref getAthleticsNewsData
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt AthleticsNewsUpdateEvent.Arn

  ClubsUpdateEvent:
    Type: "AWS::Events::Rule"
    DependsOn:
      - ESDomain
    Properties:
      Description: Triggers the State machine to retrieve and save Clubs data, every 365 days
      Name: ClubsEventRule
      RoleArn: !GetAtt CloudwatchEventRuleIAMRole.Arn
      ScheduleExpression: rate(525600 minutes)
      State: "DISABLED"
      Targets:
        - Arn: !GetAtt getClubData.Arn
          Id: ClubsTarget
          Input: '{"dataType": "Clubs"}'
  
  PermissionForEventsToInvokeClubsLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref getClubData
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ClubsUpdateEvent.Arn

  getEventsData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_events_data.lambda_handler
      Description: >
        Function that grabs data from the UBCO Events page
      MemorySize: 1024
      Timeout: 120
      CodeUri: ./functions/get_events_data
      Role: !GetAtt DataGrabberLambdaIAMRole.Arn
      Environment:
        Variables:
#          EVENTS_TABLE_NAME: !Ref eventsTable
          DOCUMENTS_TABLE_NAME: !Ref documentsTable
          EVENTS_EXPIRY_OFFSET: !Ref eventsExpiryDays

  getNewsData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_news_data.lambda_handler
      Description: >
        Function that grabs data from the UBCO News page
      MemorySize: 256
      Timeout: 60
      CodeUri: ./functions/get_news_data
      Role: !GetAtt DataGrabberLambdaIAMRole.Arn
      Environment:
        Variables:
          NEWS_TABLE_NAME: !Ref documentsTable
          DOCUMENT_EXPIRY_DAYS: !Ref newsExpiryDays

  getAthleticsNewsData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_athletics_news_data.lambda_handler
      Description: >
        Function that grabs data from the UBCO News page
      MemorySize: 256
      Timeout: 60
      CodeUri: ./functions/get_athletics_news_data
      Role: !GetAtt DataGrabberLambdaIAMRole.Arn
      Environment:
        Variables:
          ATHLETICS_NEWS_TABLE_NAME: !Ref documentsTable
          DOCUMENT_EXPIRY_DAYS: !Ref newsExpiryDays

  getBlogData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_blog_data.lambda_handler
      Description: >
        Function that grabs data from the UBCO Student Blog page
      MemorySize: 256
      Timeout: 60
      CodeUri: ./functions/get_blog_data
      Role: !GetAtt DataGrabberLambdaIAMRole.Arn
      Environment:
        Variables:
#          BLOGS_TABLE_NAME: !Ref blogsTable
          DOCUMENTS_TABLE_NAME: !Ref documentsTable
          DOCUMENT_EXPIRY_DAYS: !Ref blogExpiryDays


  documentTableStreamHandler:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: document_stream_handler.handler
      Description: >
        Lambda function that performs actions in response to INSERT, UPDATE and DELETE events for the document table
      MemorySize: 256
      Timeout: 300
      CodeUri: ./functions/document_stream_handler
      Role: !GetAtt StreamHandlerRole.Arn
      Environment:
        Variables:
          ES_DOMAIN: !GetAtt ESDomain.DomainEndpoint



  documentsTableHandlerTrigger:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      EventSourceArn: !GetAtt documentsDDBTable.StreamArn
      FunctionName: !GetAtt documentTableStreamHandler.Arn
      StartingPosition: "LATEST"
      Enabled: True

  getClubData:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: get_club_data.lambda_handler
      Description: >
        Function that grabs data from the UBCO Club directory
      MemorySize: 256
      Timeout: 300
      CodeUri: ./functions/get_club_data
      Role: !GetAtt DataGrabberLambdaIAMRole.Arn
      Environment:
        Variables:
          CLUBS_TABLE_NAME: !Ref documentsTable

#  esHasher:
#    Type: "AWS::Serverless::Function"
#    Properties:
#      Handler: es_hasher.lambda_handler
#      Description: >
#        This function creates hashes for documents in the events, news and blogs table to update the ES indices with new data
#      MemorySize: 512
#      Timeout: 600
#      CodeUri: ./functions/es_hasher
#      Role: !GetAtt esHasherLambdaIAMRole.Arn
#      Environment:
#        Variables:
#          ES_HASH_TABLE_NAME: !Ref esHashTable
#          ES_DOMAIN: !GetAtt ESDomain.DomainEndpoint

  getESDocuments:
    Type: "AWS::Serverless::Function"
    Properties:
      Handler: get_es_documents.lambda_handler
      Description: >
        Given a list of categories and index, it queries the Elasticsearch index for documents with similar categories
      MemorySize: 256
      Timeout: 600
      CodeUri: ./functions/get_es_documents
      Role: !GetAtt esQueryLambdaIAMRole.Arn
      Environment:
        Variables:
          ES_DOMAIN: !GetAtt ESDomain.DomainEndpoint

  backendStackName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "BackendStackName"
      Type: String
      Value: !Sub "${AWS::StackName}"

  getESDocumentsLambdaName:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/GetESDocumentsLambdaName"
      Type: String
      Value: !Ref getESDocuments

  getESDocumentsLambdaArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/GetESDocumentsLambdaArn"
      Type: String
      Value: !GetAtt getESDocuments.Arn

#   eventsDDBArn:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/EventsTableArn"
#       Type: String
#       Value: !GetAtt eventsDDBTable.Arn

#   blogsDDBArn:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/BlogsTableArn"
#       Type: String
#       Value: !GetAtt blogsDDBTable.Arn

#   newsDDBArn:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/NewsTableArn"
#       Type: String
#       Value: !GetAtt newsDDBTable.Arn

#   athleticsNewsDDBArn:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/AthleticsNewsTableArn"
#       Type: String
#       Value: !GetAtt athleticsNewsDDBTable.Arn

#   clubsDDBArn:
#     Type: AWS::SSM::Parameter
#     Properties:
#       Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/ClubsTableArn"
#       Type: String
#       Value: !GetAtt clubsDDBTable.Arn

  documentsTableDDBArn:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/amplify/${ProjectName}/${EnvironmentName}/documentsTableArn"
      Type: String
      Value: !GetAtt documentsDDBTable.Arn

  eventsQueryTime:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "EventsQueryTime"
      Type: String
      Value: "2021-05-01 6:07:08"

  newsQueryTime:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "NewsQueryTime"
      Type: String
      Value: "2021-05-01 06:07:08"

  athleticsNewsQueryTime:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "AthleticsNewsQueryTime"
      Type: String
      Value: "2020-01-01 06:07:08"

  blogsQueryTime:
    Type: AWS::SSM::Parameter
    Properties:
      Name: "BlogsQueryTime"
      Type: String
      Value: "2019-01-01 06:07:08"

  documentsDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DocumentsTable
      AttributeDefinitions:
        - AttributeName: "documentType"
          AttributeType: "S"
        - AttributeName: "documentId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "documentType"
          KeyType: "HASH"
        - AttributeName: "documentId"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits:
          5
        WriteCapacityUnits:
          5
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      TimeToLiveSpecification:
        AttributeName: "expiresOn"
        Enabled: True

#  eventsDDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      TableName: !Ref eventsTable
#      AttributeDefinitions:
#        - AttributeName: "eventId"
#          AttributeType: "S"
#      KeySchema:
#        - AttributeName: "eventId"
#          KeyType: "HASH"
#      ProvisionedThroughput:
#        ReadCapacityUnits:
#          5
#        WriteCapacityUnits:
#          5
#      PointInTimeRecoverySpecification:
#        PointInTimeRecoveryEnabled: True
#      SSESpecification:
#        SSEEnabled: True
#      TimeToLiveSpecification:
#        AttributeName: "expiresOn"
#        Enabled: True

#  newsDDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      TableName: !Ref newsTable
#      AttributeDefinitions:
#        - AttributeName: "newsId"
#          AttributeType: "S"
#      KeySchema:
#        - AttributeName: "newsId"
#          KeyType: "HASH"
#      ProvisionedThroughput:
#        ReadCapacityUnits:
#          5
#        WriteCapacityUnits:
#          5
#      PointInTimeRecoverySpecification:
#        PointInTimeRecoveryEnabled: True
#      SSESpecification:
#        SSEEnabled: True
#      TimeToLiveSpecification:
#        AttributeName: "expiresOn"
#        Enabled: True

#  athleticsNewsDDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      TableName: !Ref athleticsNewsTable
#      AttributeDefinitions:
#        - AttributeName: "newsId"
#          AttributeType: "S"
#      KeySchema:
#        - AttributeName: "newsId"
#          KeyType: "HASH"
#      ProvisionedThroughput:
#        ReadCapacityUnits:
#          5
#        WriteCapacityUnits:
#          5
#      PointInTimeRecoverySpecification:
#        PointInTimeRecoveryEnabled: True
#      SSESpecification:
#        SSEEnabled: True
#      TimeToLiveSpecification:
#        AttributeName: "expiresOn"
#        Enabled: True

#  blogsDDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      TableName: !Ref blogsTable
#      AttributeDefinitions:
#        - AttributeName: "blogId"
#          AttributeType: "S"
#      KeySchema:
#        - AttributeName: "blogId"
#          KeyType: "HASH"
#      ProvisionedThroughput:
#        ReadCapacityUnits:
#          5
#        WriteCapacityUnits:
#          5
#      PointInTimeRecoverySpecification:
#        PointInTimeRecoveryEnabled: True
#      SSESpecification:
#        SSEEnabled: True
#      TimeToLiveSpecification:
#        AttributeName: "expiresOn"
#        Enabled: True

#  clubsDDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      TableName: !Ref clubsTable
#      AttributeDefinitions:
#        - AttributeName: "clubId"
#          AttributeType: "S"
#      KeySchema:
#        - AttributeName: "clubId"
#          KeyType: "HASH"
#      ProvisionedThroughput:
#        ReadCapacityUnits:
#          5
#        WriteCapacityUnits:
#          5
#      PointInTimeRecoverySpecification:
#        PointInTimeRecoveryEnabled: True
#      SSESpecification:
#        SSEEnabled: True

#  esHashDDBTable:
#    Type: AWS::DynamoDB::Table
#    Properties:
#      TableName: !Ref esHashTable
#      AttributeDefinitions:
#        - AttributeName: "documentHash"
#          AttributeType: "S"
#      KeySchema:
#        - AttributeName: "documentHash"
#          KeyType: "HASH"
#      ProvisionedThroughput:
#        ReadCapacityUnits:
#          5
#        WriteCapacityUnits:
#          5
#      PointInTimeRecoverySpecification:
#        PointInTimeRecoveryEnabled: True
#      SSESpecification:
#        SSEEnabled: True

  ESDomain:
    Type: AWS::Elasticsearch::Domain
    DependsOn:
      - ESCognito
    Properties:
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref CognitoIdentityPool
        RoleArn: !GetAtt CognitoAccessForAmazonES.Arn
        UserPoolId: !Ref CognitoUserPool
      DomainName: !Ref ESDomainName
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      AdvancedOptions:
        indices.fielddata.cache.size: ''
        rest.action.multi.allow_explicit_index: 'true'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: false
        InstanceCount: 1
        InstanceType: t2.small.elasticsearch
        ZoneAwarenessEnabled: false
      ElasticsearchVersion: '7.10'


  # Cognito Authentication for Kibana Resources below     #

  ########################################
  # Cognito identity pool                #
  ########################################
  CognitoUnauthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
  CognitoAuthRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref CognitoIdentityPool
  CognitoIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref CognitoApplicationClient
          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
          ServerSideTokenCheck: false
  CognitoIdentityPoolRole:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref CognitoIdentityPool
      Roles:
        unauthenticated: !GetAtt CognitoUnauthRole.Arn
        authenticated: !GetAtt CognitoAuthRole.Arn

  #########################################################
  # The IAM role below gives ES service access            #
  # to Amazon Cognito                                     #
  # and hence the user in user pool for authentication    #
  #########################################################

  CognitoAccessForAmazonES:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: es.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonESCognitoAccess

  ############################################################################################
  # The below gives the role used by authenticated users from the cognito user pool          #
  # to access the ES domain                                                                  #
  ############################################################################################
  CognitoAuthKibanaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - es:ESHttp*
            Resource: !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${ESDomainName}/*'
      Description: give role used by authenticated users from the cognito user pool access to the ES domain
      Roles:
        - !Ref CognitoAuthRole

  ########################################
  # Cognito User pool                    #
  ########################################

  CognitoUserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Welcome to the Student Engagement App. Username: {username} Pwd: {####}'
          EmailSubject: Welcome to the Student Engagement App.
          SMSMessage: 'Welcome to the Student Engagement App. Username: {username} Pwd: {####}'
        UnusedAccountValidityDays: 14
      AliasAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Welcome to the Student Engagement App. Here is your confirmation code: {####}'
      EmailVerificationSubject: The Student Engagement App Email Confirmation Code
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      UserPoolName: !Sub '${AWS::StackName}-kibana-users'
      ## Uncomment the schema below to enable SAML integration
      # Schema:
      #   - AttributeDataType: String
      #     Name: SP-PUID
      #   - AttributeDataType: String
      #     Name: preferredGivenName
      #   - AttributeDataType: Number
      #     Name: studentYearLevel
      #   - AttributeDataType: String
      #     Name: studentLearnerEmail
      #   - AttributeDataType: String
      #     Name: specPrimPrgmType
      #   - AttributeDataType: String
      #     Name: locale
      #   - AttributeDataType: String
      #     Name: adwardingFaculty

## Uncomment the WriteAttributes and CognitoUserPoolIdP to enable SAML integration

  CognitoApplicationClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Sub '${AWS::StackName}-appclient'
      GenerateSecret: false
      RefreshTokenValidity: 2
      UserPoolId: !Ref CognitoUserPool
      # WriteAttributes:
      #   - email
      #   - "custom:SP-PUID"
      #   - "custom:preferredGivenName"
      #   - "custom:studentYearLevel"
      #   - "custom:studentLearnerEmail"
      #   - "custom:specPrimPrgmType"
      #   - "custom:locale"
      #   - "custom:adwardingFaculty"

  # CognitoUserPoolIdP:
  #   Type: AWS::Cognito::UserPoolIdentityProvider 
  #   Properties:
  #     UserPoolId: !Ref CognitoUserPool
  #     ProviderName: "CWL"
  #     ProviderType: "SAML"
  #     ProviderDetails:
  #       MetadataURL: "issuer_URL" # replace with the issuer URL
  #     AttributeMapping:
  #       custom:preferredGivenName: "displayName"
  #       custom:studentYearLevel: "yearLevel"
  #       custom:studentLearnerEmail: "email"
  #       custom:specPrimPrgmType: "primarySpecialization"
  #       custom:locale: "campus"
  #       custom:adwardingFaculty: "faculty"
  #       custom:SP-PUID: "id"

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'kibana-${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
      UserPoolId: !Ref CognitoUserPool

  ESCognito:
    Type: Custom::ESName
    DependsOn:
      - setupESCognitoCustomResourceLambda
    Properties:
      ServiceToken: !GetAtt setupESCognitoCustomResourceLambda.Arn
      StackName: !Ref AWS::StackName
      EsCluster: !Ref ESDomainName
      UserPoolId: !Ref CognitoUserPool
      kibanaUser: !Ref kibanaUser

  ########################################################
  # A lambda-based custom resource is used to configure Cognito User Pool. It adds
  # a user to the Cognito User Pool
  ########################################################

  setupESCognitoCustomResourceLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: cognito_user_creator.configure_cognito_lambda_handler
      Description: ''
      MemorySize: 512
      Timeout: 240
      Policies:
        Statement:
          - Effect: Allow
            Action:
              - 'cognito-idp:AdminCreateUser'
              - 'cognito-idp:CreateUserPoolDomain'
              - 'cognito-idp:DeleteUserPoolDomain'
            Resource:
              - !GetAtt CognitoUserPool.Arn
      CodeUri: ./functions/cognito_user_creator